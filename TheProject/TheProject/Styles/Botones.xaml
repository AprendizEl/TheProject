<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:faWPF="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp">
    
    <Style TargetType="ListBoxItem">
        <Setter Property="Background" Value="{DynamicResource  darkBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource fontColorPrimary}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource darkBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource accentColor1}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource accentColor1}"/>
                            <Setter Property="Foreground" Value="{DynamicResource accentColor2}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource accentColor2}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource accentColor2}"/>
                            <Setter Property="Foreground" Value="{DynamicResource accentColor1}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BTnormalize" TargetType="Button">

        <Setter Property="Background" Value="{DynamicResource buttonColor }" />
        
        
        <Setter Property="Template">         
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="5" 
                            Background="{TemplateBinding Background }">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>              
                
            </Setter.Value>            
            
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource buttonHoverColor}"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
        
        
        
    </Style>
    
    
    <Style x:Key="menuButton" TargetType="RadioButton">
        <!--Normal button style-->
        <Setter Property="Height" Value="50"/>
        <Setter Property="Margin" Value="-5,0,0,5"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource fontColorPrimary}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border Background="{TemplateBinding Background}"
                          BorderThickness="4,0,0,0"
                          BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Button Style on hover-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{DynamicResource  panelHoverColor}"/>
                <Setter Property="Foreground" Value="{DynamicResource fontColorPrimary}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
            <!--Activated button style-->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Margin" Value="0,0,0,5"/>
                <Setter Property="Background" Value="{DynamicResource panelActiveColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="BorderBrush" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Menu button icon-->
    <Style x:Key="menuButtonIcon" TargetType="faWPF:IconBlock">
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="45,0,35,0"/>
        <Setter Property="FontSize" Value="17"/>
    </Style>

    <!--Menu button text-->
    <Style x:Key="menuButtonText" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource AncestorType=RadioButton}}"/>
        <Setter Property="FontFamily" Value="Montserrat"/>
        <Setter Property="FontWeight" Value="Medium"/>
        <Setter Property="FontSize" Value="13.5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="Control" TargetType="Button">
        <!--Normal button style-->
        <Setter Property="Width" Value="35"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource fontColorTertiary}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                          CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <!--Button Style on hover-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource panelActiveColor}"/>
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Menu button icon-->
    <Style x:Key="ControlIcon" TargetType="faWPF:IconBlock">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />

    </Style>

    <Style x:Key="iconButton" TargetType="Button">
        <!--Normal button style-->
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource fontColorPrimary}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--Button Style on hover-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{Binding Path=Tag, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="iconI" TargetType="faWPF:IconBlock">
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Button}}"/>
        <Setter Property="Width" Value="14"/>
        <Setter Property="Height" Value="14"/>
    </Style>


    <!-- Estilo para el ToggleButton personalizado como switch -->
    <Style x:Key="SwitchToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="30" Height="15" Background="Transparent">
                        <!-- Fondo del switch -->
                        <Border x:Name="switchBackground" CornerRadius="7" Background="#ccc" />

                        <!-- Círculo dentro del switch -->
                        <Ellipse x:Name="switchCircle" Fill="White" Width="10" Height="10" HorizontalAlignment="Left" Margin="2,2,0,2">
                            <!-- Se agrega la transformación correctamente -->
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="0" />
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <!-- VisualStateManager para controlar los estados -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="switchBackground" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#393E46" Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="switchCircle" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="0" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="switchBackground" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#929AAB" Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="switchCircle" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="15" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    
    <Style x:Key="SwitchCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid Width="30" Height="15" Background="Transparent">
                        <!-- Fondo del switch -->
                        <Border x:Name="switchBackground" CornerRadius="7" Background="#ccc" />

                        <!-- Círculo dentro del switch -->
                        <Ellipse x:Name="switchCircle" Fill="White" Width="10" Height="10" HorizontalAlignment="Left" Margin="2,2,0,2">
                            <!-- Se agrega la transformación correctamente -->
                            <Ellipse.RenderTransform>
                                <TranslateTransform X="0" />
                            </Ellipse.RenderTransform>
                        </Ellipse>

                        <!-- VisualStateManager para controlar los estados -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="switchBackground" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#393E46" Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="switchCircle" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="0" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="switchBackground" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="#929AAB" Duration="0:0:0.2"/>
                                        <DoubleAnimation Storyboard.TargetName="switchCircle" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="15" Duration="0:0:0.2"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>